list: user.modelPurpose
-

for information: You are writing to provide information.
for entertainment: You are writing to entertain.
for persuasion: You are writing to persuade.
for brainstorming: You are writing to brainstorm divergent ideas.
for deciding: You are writing to converge on a decision.
for planning: You are writing to plan.
for coding: You are programming code. Return only syntactically valid code and comments. If there is any explanation make sure to comment it out rather than returning markdown.
for debugging: I am blocked on this issue and need help figuring out a path forward.
for slack: You are writing a slack message.
for table: Return the result as a table.
for prompting: You are building up context for subsequent prompts. Keep your responses concise. Include examples if they help clarify the context. Also include counterexamples if they help with understanding.
for evaluating: You are evaluating something.
for coaching: You are coaching someone.
for appreciation: You are offering appreciation.
for diverging: Youre opening up the conversation to help with thinking about the bigger picture and multiple perspectives.
for converging: You are helping converge on a decision.
for comparison: You are helping to compare two items.
for contrast: You are helping to contrast two items.
for mapping: You are helping to map out a relationship between two items.
for triage: You are helping to triage. Any suggestions you make should be doable in a short timescale. Do not discuss the time required.
for discovery: Present the response as a process of discovery, surfacing what emerges when existing frames are tested, revealing pivotal shifts, and openings for exploration.
for framing: Present the response as an act of framing, shaping how meaning arises by setting boundaries, contexts, and lenses that orient interpretation and guide further discovery.
for sensemaking: Present the response through the interplay of framing and discovery, where framing sets context and boundaries that orient meaning, and discovery tests and expands those frames by surfacing emergent possibilities, pivotal shifts, and new openings.
for presenterm: "Transform the input into a valid multi-slide presenterm deck; output raw Markdown only (no code fences). Front matter exactly: \"--- newline title: <use a descriptive title based on the input, never leave blank, do not use colons or disallowed characters> newline author: Generated (or authors: [...] ) newline date: YYYY-MM-DD newline --- newline\"; no other keys. Produce up to 12 slides (no minimum required); each slide MUST start with a Setext header (Title line, next line exactly ---), include content and references, and end with an HTML comment named end_slide on its own line, then a blank line. Emit directives only as HTML comments on their own line with exact syntax: end_slide = \"<!-- end_slide -->\"; pause = \"<!-- pause -->\"; column_layout with weights = \"<!-- column_layout: [7, 3] -->\"; column with index = \"<!-- column: 0 -->\"; reset_layout = \"<!-- reset_layout -->\"; jump_to_middle = \"<!-- jump_to_middle -->\". Use bullets/prose; support mermaid diagrams via code blocks tagged mermaid +render; support LaTeX via code blocks tagged latex +render; support D2 via code blocks tagged d2 +render; support executable snippets via fenced code blocks whose info string starts with a language then +exec (optionally +id:<name>) or +exec_replace or +image (e.g., \"```bash +exec\", \"```python +exec +id:foo\"); reference outputs with \"<!-- snippet_output: name -->\". Hide code lines with # or /// prefixes per language; other code blocks only if relevant (name the language); images only if valid paths/URLs. Escape all raw < and > characters in slide content to &lt; and &gt; except inside the required HTML comment directives. Mermaid safety: inside mermaid code blocks, do NOT encode Mermaid grammar or shape delimiters; ONLY HTML-encode reserved characters inside node/edge LABEL TEXT (the characters between the first matching pair of delimiters immediately following a node id: [], [[]], (), (()), {{}} , {{{{}}}} , [/ /], and inside link labels |...|). Within those label texts only, replace \"[\"->\"&#91;\", \"]\"->\"&#93;\", \"{{\"->\"&#123;\", \"}}\"->\"&#125;\", \"<\"->\"&lt;\", \">\"->\"&gt;\", \"&\"->\"&amp;\"; NEVER encode parentheses \"(\" or \")\" anywhere and NEVER encode the outer delimiters themselves ([], (), {{}} , [[]], (()), {{{{}}}} , [/ /], [\\\\ \\\\]); do not double-encode. Markdown safety in SLIDE BODY (outside all fenced/inline code and outside HTML directives): HTML-encode tildes unless they form valid strikethrough markup; i.e., encode every standalone or path-embedded \"~\" as \"&#126;\" so \"~/foo\" becomes \"&#126;/foo\", but keep intentional \"~~text~~\" unchanged; you MAY also encode bare \"*\"->\"&#42;\", \"_\"->\"&#95;\", and \"`\"->\"&#96;\" when not part of valid emphasis/code to prevent accidental styling. Avoid # headers. This instruction itself must contain no literal newline characters."
for code tour: You are an assistant that generates VS Code CodeTour `.tour` JSON files (schema: https://raw.githubusercontent.com/microsoft/codetour/main/schema.json). You know about all tour-level fields (title, description, ref, isPrimary, nextTour, when) and step types (content-only, directory, file+line, file+regex pattern, uri, commands, view). When I give you input, output only a valid `.tour` JSON using the relevant featuresâ€”do not include explanations or extra text outside the JSON.
