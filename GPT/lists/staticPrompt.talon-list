list: user.staticPrompt
-

# Voice, Audience, and Framing

announce: Announce this to the audience.

# Output and Formatting

emoji: Return only emoji.
clear: Remove all jargon and complex language.
simple: Rewrite this in a simpler way.
short: Shorten; preserve meaning; modified text only.
fix: Fix grammar only; keep meaning/tone; modified text only.
format: Add appropriate formatting leveraging commands available in the context (slack, markdown, etc) to the text.
HTML: Semantic HTML only.
LLM: Your response should consist of one or more prompts for an LLM. Each prompt should fit on one line.

# Analysis, Structure, and Perspective

describe: Just describe this objectively.
structure: Describe the structure of the whole input.
flow: Explain the flow.
undefined: List undefined terms only.
relation: Invert this so it focuses on the relationships between things. Describe those relationships.
type: Represent this as a type or taxonomy.
who: Explain who.
what: Explain what.
when: Explain when.
where: Explain where.
why: Explain why.
how: Explain how.
assumption: What are the assumptions behind this?
objectivity: Assess objectivity with examples.
compare: "You will find two items below. Carefully compare them. List all the differences and similarities, providing detailed explanations for each. Highlight any subtle distinctions and commonalities. The first item is this:\n\"\"\"\n{additional_source}\n\"\"\"\nThe second item follows."
clusters: Table of subtle differences among similar ideas; omit singletons; width ≤ 100 chars.
knowledge: Identify academic or industry fields of knowledge relevant to this topic. For each field, explain why it applies and what perspective it offers.
taste: Evaluate the taste of the subject by analysing how well it achieves harmony, proportion, restraint, authenticity, and cultural/historical appropriateness; explain both its strengths and weaknesses, how it balances refinement with innovation, how it aligns or conflicts with its context, and whether its judgment feels cultivated and likely to endure.
system: Evaluate the SUBJECT from a systems theory perspective, identifying boundaries, components, and stakeholders; analyze flows, feedback loops, emergent behaviors, and leverage points.
tao: "Classify the subject through Taoist philosophy—relate it to Dao 道, De 德, Yin Yang 陰陽, Wu Wei 無為, Ziran 自然, Pu 樸, Qi 氣, and Li 理; identify which apply and why."

# Planning, Product, and Execution

todo: Format as a todo list.
product: Frame this through a product lens.
metrics: List metrics that result in these outcomes with concrete examples.
value: What is the user value of this?
jobs: List the JTBD - Jobs To Be Done for this.
done: What is the definition of done for this?
how to: Quick plan to solve today’s problem.
operations: Infer an appropriate Operations Research or management science concept to apply.
incremental: How can I break this down into smaller steps to do just the next tiny increment?
bridge: "Guide me to achieve the desired situation: {additional_source}, starting from the current state. The current situation is described below."
ADR: Write an ADR.
shell: Write a shell script.
commit: Conventional commit message for staged changes.

# Exploration, Critique, and Reflection

challenge: Challenge this with questions so we can make it better.
critique: This looks bad. What is wrong with it?
retro: Help me introspect / reflect on this.
pain: List 3–5 pain points; issues; problems; obstacles; challenges; barriers. Order by importance to the audience.
experiment: I have given you a problem. Suggest one or more experiments that I can try to solve it.
science: Give me testable, relevant, and specific hypotheses.
debug: Analyze the full transcript using the scientific method of debugging—summarize only the stable current facts (not repeating prior lists), list unresolved questions, select the next best unanswered one, propose hypotheses consistent with the evidence, choose the best current hypothesis, design a minimal experiment to confirm or refute it, and restructure as needed for clarity and logical completeness.
wasinawa: "Perform a What–So What–Now What reflection. Divide your response into three parts: (1) What happened, (2) Why it matters, (3) What we should do next. Keep each section clear and distinct."
easier: This is too much work. Give me something that I can accomplish in a smaller timescale.
true: Is this true?
question: Ask open-ended questions about this that are important to the audience.

# Transformation and Reformatting
diagram: Convert plain text to mermaid diagram syntax. Infer the best diagram type. Remember that mermaid diagrams do not allow parentheses.
gherkin: Reformat into proper Gherkin using Jira markup; modified text only.
group: Group into labeled categories; results only.
split: Separate topics into clear sections; reformatted text only.
shuffled: Reconstruct text to ensure layout is logical and significantly different from the original; create new categories, each representing one idea.
match: Rewrite to match provided style; modified text only.
blend: "Combine source and destination texts coherently. Use the structure of the destination, reordering and renaming as needed. Return only the final text. Here is the destination: \"\"\"\n{additional_source}\n\"\"\" The source follows. Maintain logical and stylistic integration."
join: Merge into one coherent part; remove redundancy.
sort: Sort these items in order of importance to the audience.
context: Add LLM-ready context; context only.
presenterm: "Transform input into a valid multi-slide Presenterm deck in raw Markdown, following the exact required front matter and formatting rules; ensure safety for code blocks, diagrams, and HTML entities."

# Mathematical and Abstract Lenses

math: Consider mathematical fields that apply to this and specify which are used.
orthogonal: What is orthogonal in this?
bud: Apply addition/subtraction-like reasoning non-numerically.
boom: Apply limit/continuity-like reasoning non-numerically.
meld: Apply set theory reasoning non-numerically.
order: Apply order or lattice theory reasoning non-numerically.
logic: Apply propositional or predicate logic reasoning non-numerically.
probability: Apply probability or statistics reasoning non-numerically.
recurrence: Calculate the recurrence relation of this idea and explain its consequences in plain language.
map: "Use data mapping and transformation concepts to describe this. Identify source and target schemas, specify transformation rules, and describe how information flows between them, including loss, duplication, or enrichment at each stage."
mod: Modulo the first idea by the second idea non-numerically.
dimension: Expand dimensions of this geometrically; describe each axis.
rotation: Compute the 90-degree rotation metaphorically.
reflection: Compute the reflection metaphorically.
invert: Invert conceptually to reveal negative space.
graph: "Apply graph or tree theory reasoning non-numerically. Identify nodes, edges, and their meanings. Describe edge direction, weight, and centrality. Explain how structure influences flow or dependency within the system."
grove: Apply integral/derivative concepts non-numerically.
dub: Apply power/root concepts non-numerically.
drum: Apply multiplication/division concepts non-numerically.

# Strategy, Mapping, and Dependencies

wardley: Generate a Wardley Map by identifying users, needs, and components, then output it as a Markdown table where rows = visibility levels and columns = evolution stages. Provide a concise summary of dependencies and key strategic insights.
dependency: List dependencies and what they depend on.
cochange: In this situation with multiple subjects, show how each directly cochanges with the others.
interact: How do these interact?
dependent: How are these dependent?
independent: How are these independent?
parallel: What problems could I have if I parallelized these two items?
team: Tell me about the team structure. Just talk about the people and their roles.
unknown: Imagine I’ve missed some critical unknown unknowns in this situation. What could they be, and how might they impact the outcome?
jim: "Analyze the SUBJECT for connascence using its properties (Strength, Degree, Locality). Identify its Type (Name, Type, Position, Meaning, Algorithm, Execution, Timing, Value, Identity). Compute Severity = Strength × Degree ÷ Locality. For each instance, provide examples and remedies that reduce overall connascence, considering trade-offs."
domain: "Perform a connascence-driven discovery of business domains. Group elements by coupling where multiple forms of connascence converge, describe obligations and change scenarios, and suggest boundary-strengthening remedies with examples."
tune: "Evaluate this through the Concordance Frame: assess the visibility, scope, and volatility of dependencies that must stay in tune for correctness. Identify clusters that share coordination patterns, describe their shared intent ('tune'), and explain how their concordance affects system stability."
melody: "Analyze the system for concordance clusters: (1) Identify groups of elements coordinated by visibility, scope, and volatility. (2) Name the shared 'melody' that defines each hidden domain. (3) Explain how these domains interact and recommend actions to clarify, reinforce, or rebalance their coordination."

# Variations and Playful

silly: I want you to say something silly about this.
style: Describe style instructions with one example.
recipe: Represent this as a recipe using a custom language. Include a key for how to understand the language.
problem: I want help with abstraction laddering. I have given you a problem. I want you to make a list with that in the middle. In the item above, list three answers to the question why is this a problem?. In the item below, list three answers to the question what problems does this cause?. Order the answers in decreasing importance to the audience.
lens: "Given the input, create an abstract visualization that avoids diagrams or maps entirely. Express the big picture as a loose metaphorical form highlighting contrasts and points of interest. Include a short legend for orientation and, if needed, SVG or code instructions to view."
