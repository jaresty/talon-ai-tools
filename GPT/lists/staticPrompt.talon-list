list: user.staticPrompt
-

# Tone: Concise, operational, systems-minded
# Audience: Power users of Windsurf and Talon who maintain prompt libraries
# Purpose: Spot misclassifications and suggest minimal fixes without redundancy

# Stakeholders:
# - Prompt Librarian: Ensures alias clarity, no overlaps, consistent directionality.
# - Power User: Wants memorable, stable suffixes and predictable effects.
# - Facilitator/Team Lead: Needs consistent semantics across workflows.
# - Developer/Automator: Requires stable names and deterministic behavior.

# Changes applied:
# - Reclassify describe/abstract/explain/is objective/is obscure/critique/style to FOG.
# - Clarify process ong to “Identify the process flow; return just the flow.”
# - Keep emoji fog/dig/ong distinct.
# - No other semantic changes.

# FOG (higher-level/abstract)
reason fog: Reorder this so the reasoning comes first.
exception fog: Reorder this so the exceptions come first.
questions fog: Help me explore this using open ended questions. An open ended question cannot be answered with a simple yes or no.
emoji fog: Give me some appropriate emoji for this. Return just the emoji. Explore multiple options.
fog: Elevate the abstraction level; provide a high-level view or summary.
describe fog: Describe this content.
abstract fog: Generalize the text.
explain fog: Provide a detailed explanation.
is objective fog: Assess objectivity with examples.
is obscure fog: List undefined terms only.
critique fog: Critique: what’s wrong with the text.
style fog: Describe style instructions with an example.

# DIG (lower-level/specific)
compare dig: "You will find two items below. Carefully compare them. List all the differences and similarities, providing detailed explanations for each. Highlight any subtle distinctions and commonalities. The first item is this: \n\"\"\"\n{additional_source}\n\"\"\"\n The second item follows."
emoji dig: Make this text easier to scan by adding emoji in the appropriate places.
dig: Decrease the abstraction level; make this more specific and filling in any useful details.

# ONG (forward/transform)
table ong: The following markdown text is raw data. There is no index. Return the text in a markdown table format. Each row has a new line in the original data.
bullets ong: Convert each paragraph into a heading with bullet points underneath. Preserve citations only at the top. Don’t reduce content; remove redundancy. Use markdown.
diagram ong: Convert the following plain text into the text syntax for a mermaid diagram.
system ong: Translate the given plain text into mermaid syntax emphasizing systems thinking, loops, and dynamics.
outline ong: Create a 3–5 section outline that encapsulates the text. Return just the outline.
todo ong: Convert tasks into single action items with context and relative size tags; split multiples; return a markdown todo list only.
heading ong: Create a heading that encapsulates the text. Return just the heading.
gherkin ong: Reformat into proper Gherkin using Jira markup; return only modified text.
HTML ong: Format the text as semantic HTML; return only HTML.
whole ong: Parts-to-whole: write a complete entity description.
parts ong: Whole-to-parts: return just the elements.
groups ong: Group items into categories and label them; return just results.
joined ong: Merge parts into one coherent part; reorder as needed; remove redundancy; return only the single part.
split ong: Separate topics into clear sections; return only reformatted text.
short ong: Shorten while preserving meaning; return only modified text.
flat ong: Edit into one cohesive paragraph; return only the paragraph.
shuffled ong: Reconstruct layout with new single-idea categories; avoid AND/OR conjunctions; same language.
clear ong: Add appropriate context and useful info; fix grammar. If questions are needed, ask them instead. (Note: this one may prompt questions.)
fix ong: Fix grammar only; keep meaning and tone; return only modified text.
context ong: Add LLM-ready context; return just the context.
softer ong: Make the tone softer; return only modified text.
stronger ong: Make the tone stronger; return only modified text.
match ong: Rewrite to match provided style; return only modified text.
math ong: Convert to a mathematical formula or representation.
interesting ong: Lead with the most surprising/interesting part; keep tone; return only modified text.
direct ong: Make ordering more direct; main point first; return only modified text.
indirect ong: Make ordering indirect; main point last; return only modified text.
emphatic ong: Emphasize the text to show greater significance.
understated ong: Mark as not the main point; easily distinguishable.
blend ong: Blend source into destination structure; return final text only.
guard ong: Refactor code to guard clauses/errors first; return only modified code.
docs ong: Add API docs for all parameters; return only modified text.
dry ong: Reduce code duplication without changing behavior; return only new code.
commit ong: Draft a conventional commit message for staged changes.
clusters ong: Table of subtle differences among similar ideas; omit singletons; width ≤ 100 chars.
dependencies ong: List dependencies and what they depend on.
process ong: Identify the process flow; return just the flow.
how to ong: Quick plan to solve the problem today.
bridge ong: Guide from current to desired situation using given additional_source.
emoji ong: Give an appropriate emoji; return just the emoji.
metrics ong: Find metrics with concrete examples; return just the metrics.
retro ong: Design a group reflection approach; provide what to do.
mini retro ong: Sub-5-minute reflection approach; simple 1–2 steps.
ong: Infer what to do with this and do it. I cannot respond to any questions.

# ROG (back/undo)
rog: Infer the query that led to this response.

# TAP (begin ongoing convo)
tap: Assume use with an LLM; give 3–5 good uses tailored to the following.
knowledge tap: 3–5 applicable fields of knowledge/theory.
audience tap: 3–5 possible audiences.
tone tap: 3–5 possible tones.

# Notes:
# - Removed “dip” and “fly” prefixes; applied fog/dig/ong/rog/tap suffixes per directionality.
# - Deduplicated overlapping items; preserved distinct intents (e.g., emoji fog vs emoji ong vs emoji dig).
# - Kept commands terse for fast recall (e.g., “table ong”, “fix ong”, “compare dig”).
