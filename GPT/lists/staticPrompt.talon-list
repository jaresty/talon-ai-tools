list: user.staticPrompt
# Voice: Stakeholders and why they care
#
-

emoji: Return only emoji.
commit: Conventional commit message for staged changes.
flow: Explain the flow.
diagram: Convert plain text to mermaid diagram syntax. Infer the best diagram type. Remember that mermaid diagrams do not allow parentheses.
describe: Just describe this objectively.
math: Consider fields of mathematics that apply to this to frame your response and tell me which you are using:
clear: Remove all jargon and complex language.
todo: Format as a todo list.
assumption: What are the assumptions behind this?
value: What is the user value of this?
gherkin: Reformat into proper Gherkin using Jira markup; modified text only.
team: Tell me about the team structure. Just talk about the people and their roles.
questions: Generate open‑ended questions only.
recipe: Represent this as a recipe using a custom language. Include a key for how to understand the language.
challenge: Challenge this with questions so we can make it better.
product: Frame this through a product lens.
metrics: List metrics that result in these outcomes with concrete examples.
retro: Help me introspect / reflect on this.
objectivity: Assess objectivity with examples.
structure: Describe the structure of the whole input.
relation: Invert this so it focuses on the relationships between things. Describe those relationships.
style: Describe style instructions with one example.
critique: This looks bad. What is wrong with it?
wasinawa: I want you to help me with doing a what, so what, now what analysis. For the following ask those three questions and give me your answers. What refers to what happened. So what refers to what is important about what happened. Now what refers to what should we do about what happened.
silly: I want you to say something silly about this.
problem: I want help with abstraction laddering. I have given you a problem. I want you to make a list with that in the middle. In the item above, list three answers to the question why is this a problem?. In the item below, list three answers to the question what problems does this cause?. Order the answers in decreasing importance to the audience.
science: Give me testable, relevant, and specific hypotheses.
experiment: I have given you a problem. Suggest one or more experiments that I can try to solve it.
bud: Consider concepts such as addition or subtraction (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
drum: Consider concepts such as multiplication or division (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
dub: Consider concepts such as powers or roots (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
grove: Consider concepts such as integrals or derivatives (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
boom: Consider concepts such as limits or continuity (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
meld: Apply set theory to this and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
graph: Consider concepts such as trees or graphs (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
order: Consider concepts such as partial orders or lattices (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
probability: Consider concepts such as distributions or probabilities (etc) and pick one consistent angle for your response that fits. Apply those concepts in a non-numerical way to this.
recurrence: Calculate the (mathematical) recurrence relation of this idea; explain the consequences in plain language.
join: Merge into one coherent part; remove redundancy;
pain: List 3-5 pain points; issues; problems; obstacles; challenges; barriers. Order by importance to the audience.
done: What is the definition of done for this?
group: Group into labeled categories; results only.
shuffled: Reconstruct the following text to ensure the layout is logical and significantly different from the original. Create new categories, each representing a single idea without using conjunctions like AND or OR. Present the revised text in the same language.
split: Separate topics into clear sections; reformatted text only.
short: Shorten; preserve meaning; modified text only.
sort: Sort these items in order of importance to the audience.
fix: Fix grammar only; keep meaning/tone; modified text only.
match: Rewrite to match provided style; modified text only.
blend: "Im going to give you some source text and destination text, and I want you to modify the destination text based on the contents of the source text in a way that combines both of them together. Use the structure of the destination text, reordering and renaming as necessary to ensure a natural and coherent flow. Return only the final text with no decoration for insertion into a document in the specified language. Here is the destination text: \"\"\"\n {additional_source} \n\"\"\" The source text follows."
mod: Modulo the first idea by the second idea but not in a numerical sense.
map: Use data mapping / transformation concepts to describe the transformation.
clusters: Table of subtle differences among similar ideas; omit singletons; width ≤ 100 chars.
bridge: "Guide me to achieve the desired situation: {additional_source}, starting from the current state. The current situation is described below."
compare: "You will find two items below. Carefully compare them. List all the differences and similarities, providing detailed explanations for each. Highlight any subtle distinctions and commonalities. The first item is this: \n\"\"\"\n{additional_source}\n\"\"\"\n The second item follows."
invert: Invert this so it is still true focuses on the things that were `negative space` in the original. Im not looking for a literal inversion but rather metaphorical one.
reflection: Calculate the reflection of this but not in a numerical sense.
rotation: Calculate the 90 degree rotation of this but not in a numerical sense.
dimension: Expand the dimensions (geometric) of this. For each axis explain of the scale of the dimension.
HTML: Semantic HTML only.
type: Represent this as a type or taxonomy.
format: Add appropriate formatting leveraging commands available in the context (slack, markdown, etc) to the text.
simple: Rewrite this in a simpler way.
context: Add LLM‑ready context; context only.
easier: This is too much work. Give me something that I can accomplish in a smaller timescale.
knowledge: Identify academic or industry fields of knowledge that are relevant to this topic. For each field, explain why it applies and what perspective it offers.
connascence: Analyze dependencies through a connascence-as-change-binding lens by classifying type (Name, Type, Meaning, Position, Algorithm, Execution, Timing, Identity, Value), deriving strength from that order, noting locality (scope) and degree (co-varying elements), and surfacing hotspots where strong or dynamic connascence spans distant boundaries, with goal-aligned, non-prescriptive options.
why: Explain why.
how: Explain how.
who: Explain who.
what: Explain what.
when: Explain when.
where: Explain where.
shell: Write a shell script.
LLM: Your response should consist of one or more prompts for an LLM. Each prompt should fit on one line.
ADR: Write an ADR.
operations: Infer an appropriate Operations Research (management science) or operations theory mathematical concept to apply.
undefined: List undefined terms only.
dependency: List dependencies and what they depend on.
how to: Quick plan to solve today’s problem.
question: Ask open ended questions about this that are important to the audience.
unknown: Imagine I’ve missed some critical unknown unknowns in this situation. What could they be, and how might they impact the outcome?
lens: Given the input, create an abstract visualization that avoids diagrams or maps entirely, expressing the big picture as a loose metaphorical form (consider the input and invent an effective concept) that highlights contrasts, intensities, and points of interest, provides simple anchors for reference, and a short legend for orientation while leaving room for exploration. The output should be an SVG or code that can be run. Give instructions to view if any additional steps are required.
presenterm: "Transform the input into a valid multi-slide presenterm deck; output raw Markdown only (no code fences). Front matter exactly: \"--- newline title: <use a descriptive title based on the input, never leave blank; in the title, encode any colon ':' as &#58; and encode < and > as &lt; and &gt;> newline author: Generated (or authors: [...] ) newline date: YYYY-MM-DD newline --- newline\"; no other keys. Produce up to 12 slides (no minimum required); each slide MUST start with a Setext header (Title line, next line exactly ---), include content and references, and end with an HTML comment named end_slide on its own line with nothing else, then a blank line; the final slide MAY omit the closing end_slide. ALWAYS insert a blank line before the References section so that a line with \"References\" or \"- References\" is preceded by one empty line. Emit directives only as HTML comments on their own line with exact syntax and nothing else on the line: end_slide = \"<!-- end_slide -->\"; pause = \"<!-- pause -->\"; column_layout with weights = \"<!-- column_layout: [7, 3] -->\"; column with index = \"<!-- column: 0 -->\"; reset_layout = \"<!-- reset_layout -->\"; jump_to_middle = \"<!-- jump_to_middle -->\". CODE FENCE SAFETY: whenever a fenced code block opens (e.g., ```mermaid +render, ```bash +exec, ```latex +render, ```d2 +render), you MUST emit a matching closing fence of exactly three backticks on its own line BEFORE any non-code content, directive, or end_slide; IF a fence is still open at slide end, AUTO-EMIT the closing fence first. Support mermaid diagrams via code blocks tagged mermaid +render; support LaTeX via code blocks tagged latex +render; support D2 via code blocks tagged d2 +render; support executable snippets via fenced code blocks whose info string starts with a language then +exec (optionally +id:<name>) or +exec_replace or +image; only emit \"<!-- snippet_output: name -->\" if a snippet with +id:name exists. Hide code lines with # or /// prefixes per language; other code blocks only if relevant (name the language); images only if valid paths/URLs. HTML SAFETY IN SLIDE BODY (outside all fenced/inline code and outside HTML directives): raw HTML is NOT allowed; therefore you MUST replace EVERY literal '<' with &lt; and EVERY literal '>' with &gt; in body text (including list items and headings); NEVER output raw '<' or '>' in body text. Markdown safety in SLIDE BODY: prevent accidental styling by encoding isolated control chars unless part of valid syntax; encode every standalone or path-embedded '~' as \"&#126;\" (so \"~/foo\" becomes \"&#126;/foo\"), but keep intentional \"~~text~~\" unchanged. MERMAID SAFETY: inside mermaid code blocks, preserve Mermaid grammar and delimiters unchanged ([], (), [[]], (()), [/ /]); for NODE/EDGE LABEL TEXT you MUST wrap the entire label in ASCII double quotes and, inside that quoted text ONLY, you may encode problematic characters using **Mermaid-compatible numeric codes with NO leading ampersand**: use \"#91;\" for '[', \"#93;\" for ']', \"#40;\" for '(', \"#41;\" for ')', \"#123;\" for '{{', \"#125;\" for '}}', \"#60;\" for '<', \"#62;\" for '>', \"#35;\" for '#', and \"#58;\" for ':'; escape an internal double quote as \\\"; leave ampersands '&' and slashes '/' as-is; do not apply any other entity encodings inside labels; do not double-encode. Avoid # headers. This instruction itself must contain no literal newline characters. Talon note: every literal curly brace in this instruction is doubled (\"{{\" and \"}}\")."
interact: How do these interact?
dependent: How are these dependent?
independent: How are these independent?
parallel: What problems could I have if I parallelized these two items?
salience: From the given context, identify the issues that stand out as most salient—those most visible, pressing, or meaningful—and explain how and why they gain that salience in relation to the situation.
true: Is this true?
